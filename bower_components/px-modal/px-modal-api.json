{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Creates a wrapper around an HTML element that users can tap to show\na `<px-modal>`. Pass any content into the `<px-modal-trigger>` tag and data-bind\nthe element's `trigger` property to the modal's `openTrigger` property.\n\n### Usage\n\n    <px-modal open-trigger=\"[[openTrigger]]\"></px-modal>\n    <px-modal-trigger trigger=\"{{openTrigger}}\">\n      <button>Open Modal</button>\n    </px-modal-trigger>",
      "summary": "",
      "path": "px-modal-trigger.html",
      "properties": [
        {
          "name": "trigger",
          "type": "HTMLElement",
          "description": "Reference to the HTML element wrapping around the user-tappable\ncontent. Makes it easy to data-bind a tappable element to the\npx-modal `openTrigger` property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 10
        },
        "end": {
          "line": 45,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "trigger",
          "description": "Reference to the HTML element wrapping around the user-tappable\ncontent. Makes it easy to data-bind a tappable element to the\npx-modal `openTrigger` property.",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "trigger-changed",
          "description": "Fired when the `trigger` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "px-modal-trigger.html",
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 17
            }
          }
        }
      ],
      "tagname": "px-modal-trigger"
    },
    {
      "description": "Modals open over the page content and prompt the user to take some actions before\nthey continue using the app. Modals can be used to confirm the user wants to\ncomplete a destructive action, to prompt a specific input needed before moving\nforward, or to inform the user of some important information.\n\n### Basic usage\n\nTo create a basic modal, pass some text in for the user to read and provide strings\nfor the accept and reject trigger buttons. Open the modal by setting the `opened`\nproperty to `true`:\n\n    <px-modal\n        header-text=\"Confirm delete\"\n        body-text=\"Do you want to delete this record? The record will be deleted permanently.\"\n        accept-text=\"Permanently Delete Record\"\n        reject-text=\"Cancel\"\n        opened>\n    </px-modal>\n\nUse the `<px-modal-trigger>` element to create a target the user can tap to open\nthe modal. Data-bind the wrapper's `trigger` property to the modal's `openTrigger`\nproperty to connect the two:\n\n    <px-modal-trigger trigger=\"{{trigger}}\">\n      <button>Open the modal</button>\n    </px-modal-trigger>\n    <px-modal open-trigger=\"[[trigger]]\" header-text=\"...\" body-text=\"...\" accept-text=\"...\" reject-text=\"...\">\n    </px-modal>\n\n### Custom content\n\nThe app can pass in custom content to display for the modal header, body,\nand accept and reject trigger sections. Use the `header`, `body`, `accept-trigger`,\nand `reject-trigger` slots to define custom content:\n\n    <px-modal opened>\n      <div slot=\"header\">Confirm delete</div>\n      <div slot=\"body\">\n        <p>Do you want to delete this record? The record will be deleted permanently.</p>\n      </div>\n      <button slot=\"reject-trigger\">Cancel</button>\n      <button slot=\"accept-trigger\">Permanently Delete Record</button>\n    </px-modal>\n\nWhen the user taps on elements passed into the trigger slots the modal will\nautomatically hide itself and fire relevant events.\n\n### Responding to accept and reject triggers\n\nThe user can accept or reject a modal prompt. Apps may want to respond differently\ndepending on what the user selects. For example, if the user accepts a delete\nconfirmation modal the app should delete the record, and if the user rejects the\nmodal the apps should cancel the deletion. Listen for the\n`px-modal-rejected` and `px-modal-accepted` events\nto respond to user actions:\n\n    <px-modal\n        id=\"confirmModal\"\n        header-text=\"Confirm delete\"\n        body-text=\"Do you want to delete this record? The record will be deleted permanently.\"\n        accept-text=\"Permanently Delete Record\"\n        reject-text=\"Cancel\"\n        opened>\n    </px-modal>\n    <script>\n      var modal = document.getElementByID('confirmModal');\n      modal.addEventListener('px-modal-rejected', function(e) {\n        // ... handle reject action here ...\n      });\n      modal.addEventListener('px-modal-accepted', function(e) {\n        // ... handle accept action here ...\n      });\n    </script>\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description\n:------------|:-------------\n`--px-modal-background-color` | Background color of the modal dialog\n`--px-modal-overlay-color`    | Color of the overlay that covers the screen behind the modal dialog\n`--px-modal-text-color`       | Text color for content set via. properties (slotted content will not use this color)",
      "summary": "",
      "path": "px-modal.html",
      "properties": [
        {
          "name": "headerText",
          "type": "string",
          "description": "String displayed in the modal header. Override with custom HTML using\nthe `header` slot.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "bodyText",
          "type": "string",
          "description": "String displayed in the modal body. Override with custom HTML using\nthe `body` slot.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 148,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "acceptText",
          "type": "string",
          "description": "String used for the accept button. Override with a custom button using\nthe `accept-trigger` slot.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "rejectText",
          "type": "string",
          "description": "String used for the reject button. Override with a custom button using\nthe `reject-trigger` slot.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 8
            },
            "end": {
              "line": 160,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "opened",
          "type": "boolean",
          "description": "Set to `true` to show the modal or `false` to hide the modal.\nAutomatically updated when the use user taps a trigger that opens or\ncloses the modal.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 8
            },
            "end": {
              "line": 173,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_handleOpenedChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "openTrigger",
          "type": "HTMLElement",
          "description": "Set to an HTMLElement reference using JavaScript. When the element\nis clicked or tapped, the modal will be opened. To create your own\nmechanism for opening the modal use the `opened` property and\ndo not set an `openTrigger`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 8
            },
            "end": {
              "line": 184,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_handleOpenTriggerUpdated\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleOpenedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ]
        },
        {
          "name": "_getFocusableElements",
          "description": "Searches for focusable elements passed in via slots or created in this\ncomponent's shadow DOM template. Returns an array of focusable\nelements.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<HTMLElement>"
          }
        },
        {
          "name": "_handleModalKeypress",
          "description": "Intercepts keyboard events when the modal is opened and traps user\nfocus on tab. Closes the modal when the user hits escape.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 270,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_handleTransitionEnd",
          "description": "After the modal animates into visibility focus the first focusable element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 284,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_handleOpenTriggerUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newTrigger"
            },
            {
              "name": "oldTrigger"
            }
          ]
        },
        {
          "name": "_handleRejectTriggerTapped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleAcceptTriggerTapped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 134,
          "column": 12
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "header-text",
          "description": "String displayed in the modal header. Override with custom HTML using\nthe `header` slot.",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "body-text",
          "description": "String displayed in the modal body. Override with custom HTML using\nthe `body` slot.",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 8
            },
            "end": {
              "line": 148,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "accept-text",
          "description": "String used for the accept button. Override with a custom button using\nthe `accept-trigger` slot.",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 8
            },
            "end": {
              "line": 154,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "reject-text",
          "description": "String used for the reject button. Override with a custom button using\nthe `reject-trigger` slot.",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 8
            },
            "end": {
              "line": 160,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "opened",
          "description": "Set to `true` to show the modal or `false` to hide the modal.\nAutomatically updated when the use user taps a trigger that opens or\ncloses the modal.",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 8
            },
            "end": {
              "line": 173,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "open-trigger",
          "description": "Set to an HTMLElement reference using JavaScript. When the element\nis clicked or tapped, the modal will be opened. To create your own\nmechanism for opening the modal use the `opened` property and\ndo not set an `openTrigger`.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 8
            },
            "end": {
              "line": 184,
              "column": 9
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "px-modal-accepted",
          "description": "px-modal-accepted",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "px-modal-rejected",
          "description": "px-modal-rejected",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "header",
          "range": {
            "file": "px-modal.html",
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 104,
              "column": 17
            }
          }
        },
        {
          "description": "",
          "name": "body",
          "range": {
            "file": "px-modal.html",
            "start": {
              "line": 108,
              "column": 10
            },
            "end": {
              "line": 110,
              "column": 17
            }
          }
        },
        {
          "description": "",
          "name": "reject-trigger",
          "range": {
            "file": "px-modal.html",
            "start": {
              "line": 116,
              "column": 12
            },
            "end": {
              "line": 118,
              "column": 19
            }
          }
        },
        {
          "description": "",
          "name": "accept-trigger",
          "range": {
            "file": "px-modal.html",
            "start": {
              "line": 122,
              "column": 12
            },
            "end": {
              "line": 124,
              "column": 19
            }
          }
        }
      ],
      "tagname": "px-modal"
    }
  ]
}
